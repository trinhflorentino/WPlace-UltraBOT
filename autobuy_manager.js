const fs = require('fs');
const path = require('path');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file accounts.json
const accountsPath = path.join(__dirname, 'db', 'accounts.json');

// H√†m ƒë·ªçc file accounts.json
function readAccounts() {
    try {
        const accountsData = fs.readFileSync(accountsPath, 'utf8');
        return JSON.parse(accountsData);
    } catch (error) {
        console.error('‚ùå L·ªói ƒë·ªçc file:', error.message);
        process.exit(1);
    }
}

// H√†m ghi file accounts.json
function writeAccounts(accounts) {
    try {
        const updatedData = JSON.stringify(accounts, null, 2);
        fs.writeFileSync(accountsPath, updatedData, 'utf8');
    } catch (error) {
        console.error('‚ùå L·ªói ghi file:', error.message);
        process.exit(1);
    }
}

// H√†m th√™m autobuy: "rec" cho t·∫•t c·∫£ t√†i kho·∫£n
function addAutobuy() {
    console.log('üîÑ ƒêang th√™m autobuy: "rec" cho t·∫•t c·∫£ t√†i kho·∫£n...\n');
    
    const accounts = readAccounts();
    console.log(`üìä T√¨m th·∫•y ${accounts.length} t√†i kho·∫£n\n`);
    
    let updatedCount = 0;
    let alreadyHasCount = 0;
    
    accounts.forEach((account, index) => {
        if (!account.hasOwnProperty('autobuy') || account.autobuy !== "rec") {
            const oldValue = account.autobuy || 'undefined';
            account.autobuy = "rec";
            updatedCount++;
            console.log(`‚úì C·∫≠p nh·∫≠t t√†i kho·∫£n ${account.name || account.id}: autobuy "${oldValue}" ‚Üí "rec"`);
        } else {
            alreadyHasCount++;
            console.log(`- T√†i kho·∫£n ${account.name || account.id} ƒë√£ c√≥ autobuy: "rec"`);
        }
    });
    
    if (updatedCount > 0) {
        writeAccounts(accounts);
        console.log(`\n‚úÖ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} t√†i kho·∫£n`);
    } else {
        console.log(`\n‚úÖ T·∫•t c·∫£ ${accounts.length} t√†i kho·∫£n ƒë√£ c√≥ autobuy: "rec"!`);
    }
    
    console.log(`üìä T·ªïng k·∫øt:`);
    console.log(`   - T√†i kho·∫£n ƒë√£ c√≥ autobuy: "rec": ${alreadyHasCount}`);
    console.log(`   - T√†i kho·∫£n ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${updatedCount}`);
    console.log(`   - T·ªïng t√†i kho·∫£n: ${accounts.length}`);
}

// H√†m x√≥a thu·ªôc t√≠nh autobuy kh·ªèi t·∫•t c·∫£ t√†i kho·∫£n
function removeAutobuy() {
    console.log('üóëÔ∏è ƒêang x√≥a thu·ªôc t√≠nh autobuy kh·ªèi t·∫•t c·∫£ t√†i kho·∫£n...\n');
    
    const accounts = readAccounts();
    console.log(`üìä T√¨m th·∫•y ${accounts.length} t√†i kho·∫£n\n`);
    
    let removedCount = 0;
    let noAutobuyCount = 0;
    
    accounts.forEach((account, index) => {
        if (account.hasOwnProperty('autobuy')) {
            const oldValue = account.autobuy;
            delete account.autobuy;
            removedCount++;
            console.log(`‚úì ƒê√£ x√≥a autobuy: "${oldValue}" kh·ªèi t√†i kho·∫£n ${account.name || account.id}`);
        } else {
            noAutobuyCount++;
            console.log(`- T√†i kho·∫£n ${account.name || account.id} kh√¥ng c√≥ thu·ªôc t√≠nh autobuy`);
        }
    });
    
    if (removedCount > 0) {
        writeAccounts(accounts);
        console.log(`\n‚úÖ Ho√†n th√†nh! ƒê√£ x√≥a autobuy kh·ªèi ${removedCount} t√†i kho·∫£n`);
    } else {
        console.log(`\n‚úÖ Kh√¥ng c√≥ t√†i kho·∫£n n√†o c√≥ thu·ªôc t√≠nh autobuy!`);
    }
    
    console.log(`üìä T·ªïng k·∫øt:`);
    console.log(`   - T√†i kho·∫£n kh√¥ng c√≥ autobuy: ${noAutobuyCount}`);
    console.log(`   - T√†i kho·∫£n ƒë∆∞·ª£c x√≥a autobuy: ${removedCount}`);
    console.log(`   - T·ªïng t√†i kho·∫£n: ${accounts.length}`);
}

// H√†m ki·ªÉm tra tr·∫°ng th√°i autobuy
function checkAutobuy() {
    try {
        console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i thu·ªôc t√≠nh autobuy...\n');
        
        const accounts = readAccounts();
        console.log(`üìä T·ªïng s·ªë t√†i kho·∫£n: ${accounts.length}\n`);
        
        // Th·ªëng k√™ theo gi√° tr·ªã autobuy
        const stats = {};
        accounts.forEach(account => {
            const autobuyValue = account.autobuy || 'undefined';
            if (!stats[autobuyValue]) {
                stats[autobuyValue] = [];
            }
            stats[autobuyValue].push(account.name || account.id);
        });
        
        // Hi·ªÉn th·ªã th·ªëng k√™
        console.log('üìà Th·ªëng k√™ thu·ªôc t√≠nh autobuy:');
        Object.entries(stats).forEach(([value, accounts]) => {
            console.log(`\n   "${value}": ${accounts.length} t√†i kho·∫£n`);
            accounts.forEach(account => {
                console.log(`     - ${account}`);
            });
        });
        
        // Ki·ªÉm tra xem t·∫•t c·∫£ c√≥ ph·∫£i l√† "rec" kh√¥ng
        const allRec = Object.keys(stats).length === 1 && stats.hasOwnProperty('rec');
        
        console.log('\n' + '='.repeat(50));
        if (allRec) {
            console.log('‚úÖ T·∫§T C·∫¢ T√ÄI KHO·∫¢N ƒê√É C√ì autobuy: "rec"');
            console.log(`üéâ Ho√†n th√†nh! ${accounts.length}/${accounts.length} t√†i kho·∫£n`);
        } else if (Object.keys(stats).length === 1 && stats.hasOwnProperty('undefined')) {
            console.log('‚ö†Ô∏è  T·∫§T C·∫¢ T√ÄI KHO·∫¢N KH√îNG C√ì autobuy');
            console.log('üí° Ch·∫°y: node autobuy_manager.js add ƒë·ªÉ th√™m');
        } else {
            console.log('‚ö†Ô∏è  C√ì T√ÄI KHO·∫¢N CH∆ØA C√ì autobuy: "rec"');
            console.log('üí° Ch·∫°y: node autobuy_manager.js add ƒë·ªÉ th√™m');
        }
        console.log('='.repeat(50));
        
    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error.message);
    }
}

// X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
    case 'add':
        addAutobuy();
        break;
        
    case 'remove':
        removeAutobuy();
        break;
        
    case 'check':
        checkAutobuy();
        break;
        
    default:
        console.log('üîß C√°ch s·ª≠ d·ª•ng:');
        console.log('   node autobuy_manager.js add     - Th√™m autobuy: "rec" cho t·∫•t c·∫£ t√†i kho·∫£n');
        console.log('   node autobuy_manager.js remove  - X√≥a thu·ªôc t√≠nh autobuy kh·ªèi t·∫•t c·∫£ t√†i kho·∫£n');
        console.log('   node autobuy_manager.js check   - Ki·ªÉm tra tr·∫°ng th√°i autobuy');
        console.log('');
        console.log('üìù V√≠ d·ª•:');
        console.log('   node autobuy_manager.js add');
        console.log('   node autobuy_manager.js remove');
        console.log('   node autobuy_manager.js check');
}
